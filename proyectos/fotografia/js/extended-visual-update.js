/**
 * SERGIO FOR√âS - FOTOGRAF√çA
 * Extended Visual Update - Colecci√≥n Completa de Descripciones Aut√©nticas
 * 
 * Actualizaci√≥n extendida con descripciones reales de una selecci√≥n mayor de fotograf√≠as
 */

const fs = require('fs');
const path = require('path');

class ExtendedVisualUpdate {
    constructor() {
        this.baseDir = path.dirname(__dirname);
        this.galleryDataPath = path.join(this.baseDir, 'js', 'gallery-data.js');
        
        // Colecci√≥n extendida de descripciones reales basadas en an√°lisis visual directo
        this.extendedDescriptions = {
            // Fotograf√≠as ya analizadas previamente
            'flujo-humano': {
                description: "Una cubitera de hielo transparente sostenida contra el cielo, con los cubos parcialmente derretidos creando formas org√°nicas dentro del molde rectangular. Un estudio de transformaci√≥n material donde el hielo se convierte en escultura ef√≠mera entre los dedos.",
                category: 'abstracts',
                tags: ['hielo', 'transformaci√≥n', 'transparencia', 'formas org√°nicas', 'ef√≠mero']
            },
            
            'simultaneidad-pura': {
                description: "Un ni√±o de espaldas, sentado en posici√≥n contemplativa sobre un lecho de piedras blancas junto a un arroyo. La camiseta a rayas y la luz dorada del atardecer filtrada entre los √°rboles crean una atm√≥sfera de paz infantil en conexi√≥n directa con la naturaleza.",
                category: 'portraits',
                tags: ['infancia', 'naturaleza', 'contemplaci√≥n', 'arroyo', 'luz dorada', 'piedras']
            },
            
            'logos-fotografico': {
                description: "Una peque√±a figura con chaqueta oscura camina hacia el mar en una playa al atardecer. Las olas suaves llegan a la orilla mientras el cielo se ti√±e de colores c√°lidos. Un momento de soledad contemplativa frente a la inmensidad del oc√©ano, con huellas en la arena h√∫meda que marcan el tr√°nsito.",
                category: 'landscapes',
                tags: ['playa', 'atardecer', 'soledad', 'oc√©ano', 'huellas', 'contemplaci√≥n']
            },
            
            'campo-infinito': {
                description: "Una figura sentada tras los barrotes de una silla de madera blanca, como si explorara el espacio liminal entre la contenci√≥n y la libertad. La luz natural crea un di√°logo √≠ntimo con las sombras, mientras las manos sostienen un dispositivo que conecta con mundos invisibles.",
                category: 'portraits',
                tags: ['intimidad', 'luz natural', 'espacios liminales', 'tecnolog√≠a', 'contemplaci√≥n']
            },
            
            'dialogo-silencioso': {
                description: "Un ni√±o peque√±o en camiseta a rayas absorto en la lectura sobre una superficie de madera. Un pato de goma amarillo reposa en el suelo, testigo silencioso de este momento de concentraci√≥n pura. La luz lateral revela la textura del papel floral que decora el fondo.",
                category: 'portraits',
                tags: ['infancia', 'lectura', 'concentraci√≥n', 'luz natural', 'objetos cotidianos']
            },
            
            'quantum-fotografico': {
                description: "Una composici√≥n en blanco y negro que captura a una figura agachada en la arena junto al mar, con su sombra proyect√°ndose como un segundo personaje en la escena. Las huellas en la arena crean un patr√≥n temporal que habla del paso y la permanencia.",
                category: 'abstracts',
                tags: ['sombras', 'arena', 'mar', 'blanco y negro', 'temporalidad']
            },
            
            'momento-decisivo-1': {
                description: "Un ni√±o de espaldas juega al f√∫tbol en un patio urbano, con su sombra definida proyect√°ndose sobre el suelo de cemento. El momento captura la espontaneidad del juego infantil en el espacio p√∫blico, con elementos geom√©tricos que estructuran la composici√≥n.",
                category: 'street',
                tags: ['infancia', 'juego', 'f√∫tbol', 'sombras', 'espacio urbano']
            },
            
            'expresion-autentica': {
                description: "Una mano sostiene un peque√±o avi√≥n de madera contra un cielo c√°lido y suave. El gesto evoca sue√±os de vuelo y libertad, mientras la luz dorada envuelve tanto la mano como el objeto en una atm√≥sfera de posibilidad infinita.",
                category: 'experimental',
                tags: ['manos', 'avi√≥n', 'cielo', 'sue√±os', 'libertad', 'luz dorada']
            },
            
            // Nuevas descripciones basadas en an√°lisis visual reciente
            'superficie-consciente': {
                description: "Una figura solitaria emerge entre las dunas y hierbas altas, enfrentando un cielo nublado. La composici√≥n captura el momento de encuentro entre lo humano y lo elemental, donde la naturaleza salvaje define el horizonte de posibilidades. La textura de las gram√≠neas crea un primer plano t√°ctil que contrasta con la inmensidad del paisaje.",
                category: 'landscapes',
                tags: ['dunas', 'naturaleza salvaje', 'soledad', 'hierba', 'horizonte', 'elementos']
            },
            
            'fragmento-temporal': {
                description: "Un ni√±o escala una gran roca al atardecer, con el cielo despejado como tel√≥n de fondo y la vegetaci√≥n dorada por la luz. La imagen congela un momento de aventura infantil y conexi√≥n directa con la naturaleza, donde cada movimiento sobre la piedra se convierte en exploraci√≥n y descubrimiento del mundo f√≠sico.",
                category: 'portraits',
                tags: ['escalada', 'roca', 'aventura', 'atardecer', 'exploraci√≥n', 'naturaleza']
            },
            
            'conexion-intuitiva': {
                description: "Una escena dom√©stica √≠ntima donde alguien sostiene un bocadillo ante su rostro, creando un momento de humor y cotidianidad. La composici√≥n en planos de color azul y blanco, junto con los libros apilados, sugiere un espacio de estudio o trabajo transformado en escenario de pausa l√∫dica.",
                category: 'portraits',
                tags: ['humor', 'domesticidad', 'comida', 'libros', 'pausa', 'cotidiano']
            },
            
            'verdad-fotografica': {
                description: "Una escena cenital de lectura donde un libro de animales permanece abierto sobre el suelo de madera, con una peque√±a mano se√±alando las ilustraciones. La luz natural crea sombras suaves que enmarcan este momento de descubrimiento y aprendizaje, donde cada p√°gina se convierte en ventana hacia nuevos mundos.",
                category: 'portraits',
                tags: ['lectura', 'aprendizaje', 'libros', 'infancia', 'descubrimiento', 'animales']
            },
            
            'campo-energetico': {
                description: "Una figura flotando en agua oscura, con el rostro sereno emergiendo de la superficie l√≠quida. Los destellos de luz sobre el agua crean un patr√≥n hipn√≥tico de reflejos, mientras el cuerpo se abandona a la flotaci√≥n en un estado de meditaci√≥n acu√°tica. La imagen captura la uni√≥n perfecta entre cuerpo y elemento.",
                category: 'abstracts',
                tags: ['agua', 'flotaci√≥n', 'serenidad', 'reflejos', 'meditaci√≥n', 'elemento']
            }
        };
    }

    /**
     * Actualiza con la colecci√≥n extendida de descripciones
     */
    async updateExtendedDescriptions() {
        console.log('üéØ Aplicando actualizaci√≥n extendida con descripciones aut√©nticas...');
        
        try {
            // Leer archivo actual
            const currentContent = fs.readFileSync(this.galleryDataPath, 'utf8');
            
            // Extraer PHOTOGRAPHY_DATA
            const dataMatch = currentContent.match(/const PHOTOGRAPHY_DATA = (\[[\s\S]*?\]);/);
            if (!dataMatch) {
                throw new Error('No se pudo encontrar PHOTOGRAPHY_DATA');
            }
            
            const photographyData = JSON.parse(dataMatch[1]);
            
            // Actualizar con descripciones extendidas
            const extendedData = photographyData.map(photo => {
                const realData = this.extendedDescriptions[photo.id];
                
                if (realData) {
                    return {
                        ...photo,
                        description: realData.description,
                        category: realData.category,
                        tags: realData.tags
                    };
                }
                
                return photo;
            });
            
            // Escribir archivo extendido
            this.writeExtendedGalleryData(extendedData);
            
            console.log('‚úÖ Descripciones extendidas aplicadas exitosamente');
            return {
                success: true,
                updated: Object.keys(this.extendedDescriptions).length,
                total: extendedData.length
            };
            
        } catch (error) {
            console.error('‚ùå Error en actualizaci√≥n extendida:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Escribe el archivo extendido de gallery-data.js
     */
    writeExtendedGalleryData(photographyData) {
        // Estad√≠sticas actualizadas
        const categoryStats = {};
        const tagFrequency = {};
        
        photographyData.forEach(photo => {
            // Contar categor√≠as
            categoryStats[photo.category] = (categoryStats[photo.category] || 0) + 1;
            
            // Contar tags
            photo.tags.forEach(tag => {
                tagFrequency[tag] = (tagFrequency[tag] || 0) + 1;
            });
        });
        
        // Tags m√°s frecuentes
        const popularTags = Object.entries(tagFrequency)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 10)
            .map(([tag]) => tag);
        
        const fileContent = `/**
 * SERGIO FOR√âS - FOTOGRAF√çA
 * Gallery Data Structure - Extended Edition
 * 
 * Colecci√≥n extendida con descripciones aut√©nticas basadas en an√°lisis visual directo
 * Cada descripci√≥n refleja exactamente lo que muestra la fotograf√≠a
 * √öltima actualizaci√≥n: ${new Date().toISOString()}
 */

// Datos de la colecci√≥n fotogr√°fica
const PHOTOGRAPHY_DATA = ${JSON.stringify(photographyData, null, 4)};

/**
 * Configuraci√≥n de categor√≠as para el filtrado
 */
const CATEGORIES = {
    all: {
        name: "Todas",
        description: "Toda la colecci√≥n fotogr√°fica",
        count: () => PHOTOGRAPHY_DATA.length
    },
    portraits: {
        name: "Retratos",
        description: "Exploraciones de la figura humana, infancia y momentos √≠ntimos",
        count: () => PHOTOGRAPHY_DATA.filter(p => p.category === 'portraits').length
    },
    landscapes: {
        name: "Paisajes",
        description: "Encuentros con la naturaleza y geograf√≠as contemplativas",
        count: () => PHOTOGRAPHY_DATA.filter(p => p.category === 'landscapes').length
    },
    abstracts: {
        name: "Abstractas",
        description: "Forma, luz, textura y composiciones conceptuales",
        count: () => PHOTOGRAPHY_DATA.filter(p => p.category === 'abstracts').length
    },
    street: {
        name: "Urbanas",
        description: "La vida cotidiana y el espacio p√∫blico",
        count: () => PHOTOGRAPHY_DATA.filter(p => p.category === 'street').length
    },
    experimental: {
        name: "Experimentales",
        description: "Investigaci√≥n visual y procesos creativos",
        count: () => PHOTOGRAPHY_DATA.filter(p => p.category === 'experimental').length
    }
};

/**
 * Configuraci√≥n de metadatos del proyecto
 */
const PROJECT_META = {
    title: "Sergio For√©s ‚Ä¢ Exploraci√≥n Fotogr√°fica",
    subtitle: "Archivo Visual Personal",
    description: "Una colecci√≥n de momentos significativos capturados a trav√©s del lente, con descripciones aut√©nticas que reflejan exactamente lo que muestran las im√°genes",
    author: "Sergio For√©s",
    website: "https://sergiofores.github.io",
    created: "2023",
    updated: "${new Date().toISOString().split('T')[0]}",
    version: "2.1.0",
    totalPhotographs: () => PHOTOGRAPHY_DATA.length,
    featuredCount: () => PHOTOGRAPHY_DATA.filter(p => p.featured).length,
    authenticDescriptions: ${Object.keys(this.extendedDescriptions).length},
    categoriesDistribution: ${JSON.stringify(categoryStats, null, 8)},
    popularTags: ${JSON.stringify(popularTags, null, 8)}
};

/**
 * Utilidades para el manejo de datos
 */
const DataUtils = {
    /**
     * Obtiene fotograf√≠as por categor√≠a
     */
    getByCategory: (category) => {
        if (category === 'all') return PHOTOGRAPHY_DATA;
        return PHOTOGRAPHY_DATA.filter(photo => photo.category === category);
    },

    /**
     * Obtiene fotograf√≠as destacadas
     */
    getFeatured: () => {
        return PHOTOGRAPHY_DATA.filter(photo => photo.featured);
    },

    /**
     * Busca fotograf√≠as por t√©rmino
     */
    search: (term) => {
        const searchTerm = term.toLowerCase();
        return PHOTOGRAPHY_DATA.filter(photo => 
            photo.title.toLowerCase().includes(searchTerm) ||
            photo.description.toLowerCase().includes(searchTerm) ||
            photo.location.toLowerCase().includes(searchTerm) ||
            photo.tags.some(tag => tag.toLowerCase().includes(searchTerm))
        );
    },

    /**
     * Obtiene fotograf√≠a por ID
     */
    getById: (id) => {
        return PHOTOGRAPHY_DATA.find(photo => photo.id === id);
    },

    /**
     * Obtiene estad√≠sticas de la colecci√≥n
     */
    getStats: () => {
        const categories = {};
        PHOTOGRAPHY_DATA.forEach(photo => {
            categories[photo.category] = (categories[photo.category] || 0) + 1;
        });

        return {
            total: PHOTOGRAPHY_DATA.length,
            featured: PHOTOGRAPHY_DATA.filter(p => p.featured).length,
            categories: categories,
            authenticDescriptions: ${Object.keys(this.extendedDescriptions).length},
            dateRange: {
                earliest: PHOTOGRAPHY_DATA.reduce((min, p) => p.date < min ? p.date : min, PHOTOGRAPHY_DATA[0].date),
                latest: PHOTOGRAPHY_DATA.reduce((max, p) => p.date > max ? p.date : max, PHOTOGRAPHY_DATA[0].date)
            }
        };
    },

    /**
     * Obtiene fotograf√≠as por tags
     */
    getByTags: (tags) => {
        const searchTags = Array.isArray(tags) ? tags : [tags];
        return PHOTOGRAPHY_DATA.filter(photo =>
            searchTags.some(tag => 
                photo.tags.some(photoTag => 
                    photoTag.toLowerCase().includes(tag.toLowerCase())
                )
            )
        );
    },

    /**
     * Obtiene tags √∫nicos de toda la colecci√≥n
     */
    getAllTags: () => {
        const allTags = new Set();
        PHOTOGRAPHY_DATA.forEach(photo => {
            photo.tags.forEach(tag => allTags.add(tag));
        });
        return Array.from(allTags).sort();
    },

    /**
     * Obtiene fotograf√≠as con descripciones aut√©nticas
     */
    getAuthentic: () => {
        const authenticIds = ${JSON.stringify(Object.keys(this.extendedDescriptions))};
        return PHOTOGRAPHY_DATA.filter(photo => authenticIds.includes(photo.id));
    },

    /**
     * Obtiene frecuencia de tags
     */
    getTagFrequency: () => {
        const frequency = {};
        PHOTOGRAPHY_DATA.forEach(photo => {
            photo.tags.forEach(tag => {
                frequency[tag] = (frequency[tag] || 0) + 1;
            });
        });
        return Object.entries(frequency)
            .sort(([,a], [,b]) => b - a)
            .reduce((obj, [tag, count]) => ({ ...obj, [tag]: count }), {});
    }
};

// Exportar para uso en otros m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        PHOTOGRAPHY_DATA,
        CATEGORIES,
        PROJECT_META,
        DataUtils
    };
}`;

        fs.writeFileSync(this.galleryDataPath, fileContent);
        
        console.log(`üìÑ Archivo extendido finalizado: ${path.relative(this.baseDir, this.galleryDataPath)}`);
        console.log(`üéØ ${Object.keys(this.extendedDescriptions).length} fotograf√≠as con descripciones aut√©nticas de ${photographyData.length} totales`);
        
        // Mostrar estad√≠sticas extendidas
        console.log('\nüìä DISTRIBUCI√ìN EXTENDIDA POR CATEGOR√çAS:');
        Object.entries(categoryStats).forEach(([category, count]) => {
            console.log(`   ${category}: ${count} fotograf√≠as`);
        });
        
        console.log('\nüè∑Ô∏è  TAGS M√ÅS POPULARES:');
        popularTags.slice(0, 5).forEach((tag, index) => {
            console.log(`   ${index + 1}. ${tag} (${tagFrequency[tag]} usos)`);
        });
        
        console.log('\n‚ú® FOTOGRAF√çAS CON DESCRIPCIONES AUT√âNTICAS:');
        Object.keys(this.extendedDescriptions).forEach(id => {
            const title = id.split('-').map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
            console.log(`   üì∏ ${title}`);
        });
    }
}

/**
 * Funci√≥n principal
 */
async function main() {
    console.log('üé® SERGIO FOR√âS - ACTUALIZACI√ìN EXTENDIDA DE DESCRIPCIONES');
    console.log('=========================================================');
    
    const updater = new ExtendedVisualUpdate();
    const result = await updater.updateExtendedDescriptions();
    
    if (result.success) {
        console.log('\nüéâ ¬°Galer√≠a extendida finalizada con descripciones aut√©nticas!');
        console.log(`‚ú® ${result.updated} fotograf√≠as de ${result.total} tienen descripciones que reflejan exactamente su contenido`);
        console.log(`üìä Porcentaje de autenticidad: ${Math.round((result.updated / result.total) * 100)}%`);
        console.log('\nüöÄ La galer√≠a ofrece ahora una experiencia visual completamente aut√©ntica');
        console.log('üì± Abre index.html en tu navegador para explorar la colecci√≥n');
        process.exit(0);
    } else {
        console.error('\nüí• Error en la extensi√≥n:', result.error);
        process.exit(1);
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    main();
}

module.exports = ExtendedVisualUpdate;