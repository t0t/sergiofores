/**
 * SERGIO ARTE PL√ÅSTICA - Test Category Menu
 * Test espec√≠fico para el men√∫ de categor√≠as
 */

const fs = require('fs');

class CategoryMenuTest {
    constructor() {
        this.results = [];
    }

    async runTests() {
        console.log('üéØ TESTING CATEGORY MENU\n');
        console.log('========================\n');

        await this.testCategoryDefinitions();
        await this.testMenuGeneration();
        await this.testFilterLogic();
        await this.testCSSStyles();
        
        this.printResults();
    }

    async testCategoryDefinitions() {
        console.log('üìÅ Test 1: Verificando definici√≥n de categor√≠as...');
        
        try {
            const jsContent = await fs.promises.readFile('./js/main.js', 'utf8');
            
            // Verificar que las categor√≠as est√°n definidas
            const hasCategories = jsContent.includes("this.categories = {");
            const hasAllCategory = jsContent.includes("'all': { name: 'Todas las Obras'");
            const hasOilCategory = jsContent.includes("'oil': { name: '√ìleos sobre Lino'");
            const has3DCategory = jsContent.includes("'3dprinting': { name: 'Impresi√≥n 3D'");
            const hasDrawingCategory = jsContent.includes("'drawing': { name: 'Dibujos'");
            
            if (hasCategories && hasAllCategory && hasOilCategory && has3DCategory && hasDrawingCategory) {
                console.log('  ‚úÖ Todas las categor√≠as definidas correctamente');
                this.results.push({ test: 'Category Definitions', status: 'PASS', details: '4 categor√≠as definidas' });
            } else {
                console.log('  ‚ùå Definiciones de categor√≠as incompletas');
                this.results.push({ test: 'Category Definitions', status: 'FAIL', details: 'Categor√≠as faltantes' });
            }
        } catch (error) {
            console.log(`  ‚ùå Error: ${error.message}`);
            this.results.push({ test: 'Category Definitions', status: 'FAIL', details: error.message });
        }
    }

    async testMenuGeneration() {
        console.log('üîß Test 2: Verificando generaci√≥n de men√∫...');
        
        try {
            const jsContent = await fs.promises.readFile('./js/main.js', 'utf8');
            
            // Verificar m√©todos necesarios
            const hasCreateCategoryMenu = jsContent.includes('createCategoryMenu()');
            const hasFilterByCategory = jsContent.includes('filterByCategory(category)');
            const hasMenuHTML = jsContent.includes('category-nav');
            const hasEventListeners = jsContent.includes("btn.addEventListener('click'");
            
            if (hasCreateCategoryMenu && hasFilterByCategory && hasMenuHTML && hasEventListeners) {
                console.log('  ‚úÖ Generaci√≥n de men√∫ implementada');
                this.results.push({ test: 'Menu Generation', status: 'PASS', details: 'M√©todos presentes' });
            } else {
                console.log('  ‚ùå Generaci√≥n de men√∫ incompleta');
                this.results.push({ test: 'Menu Generation', status: 'FAIL', details: 'M√©todos faltantes' });
            }
        } catch (error) {
            console.log(`  ‚ùå Error: ${error.message}`);
            this.results.push({ test: 'Menu Generation', status: 'FAIL', details: error.message });
        }
    }

    async testFilterLogic() {
        console.log('üîç Test 3: Verificando l√≥gica de filtrado...');
        
        try {
            const jsContent = await fs.promises.readFile('./js/main.js', 'utf8');
            
            // Verificar filtrado
            const hasFilterLogic = jsContent.includes('this.slides = Array.from(this.allSlides).filter');
            const hasDisplayToggle = jsContent.includes("slide.style.display = this.slides.includes(slide) ? 'flex' : 'none'");
            const hasSlideReset = jsContent.includes('this.currentSlide = 0');
            const hasIndicatorUpdate = jsContent.includes('this.createIndicators()');
            
            if (hasFilterLogic && hasDisplayToggle && hasSlideReset && hasIndicatorUpdate) {
                console.log('  ‚úÖ L√≥gica de filtrado implementada');
                this.results.push({ test: 'Filter Logic', status: 'PASS', details: 'Filtrado funcional' });
            } else {
                console.log('  ‚ùå L√≥gica de filtrado incompleta');
                this.results.push({ test: 'Filter Logic', status: 'FAIL', details: 'L√≥gica faltante' });
            }
        } catch (error) {
            console.log(`  ‚ùå Error: ${error.message}`);
            this.results.push({ test: 'Filter Logic', status: 'FAIL', details: error.message });
        }
    }

    async testCSSStyles() {
        console.log('üé® Test 4: Verificando estilos CSS...');
        
        try {
            // Verificar que el archivo CSS existe
            const cssExists = fs.existsSync('./css/category-menu.css');
            
            if (cssExists) {
                const cssContent = await fs.promises.readFile('./css/category-menu.css', 'utf8');
                
                // Verificar clases principales
                const hasCategoryMenu = cssContent.includes('.category-menu');
                const hasCategoryNav = cssContent.includes('.category-nav');
                const hasCategoryBtn = cssContent.includes('.category-btn');
                const hasActiveState = cssContent.includes('.category-btn.active');
                const hasResponsive = cssContent.includes('@media (max-width: 768px)');
                const hasAnimations = cssContent.includes('@keyframes fadeInCategory');
                
                if (hasCategoryMenu && hasCategoryNav && hasCategoryBtn && hasActiveState && hasResponsive && hasAnimations) {
                    console.log('  ‚úÖ Estilos CSS completos');
                    this.results.push({ test: 'CSS Styles', status: 'PASS', details: 'Estilos completos con responsive' });
                } else {
                    console.log('  ‚ö†Ô∏è Algunos estilos CSS faltantes');
                    this.results.push({ test: 'CSS Styles', status: 'PARTIAL', details: 'Estilos parciales' });
                }
            } else {
                console.log('  ‚ùå Archivo CSS no encontrado');
                this.results.push({ test: 'CSS Styles', status: 'FAIL', details: 'Archivo CSS faltante' });
            }
        } catch (error) {
            console.log(`  ‚ùå Error: ${error.message}`);
            this.results.push({ test: 'CSS Styles', status: 'FAIL', details: error.message });
        }
    }

    printResults() {
        console.log('\nüìã RESUMEN DE TESTS CATEGORY MENU:');
        console.log('==================================');
        
        let passed = 0;
        let failed = 0;
        let partial = 0;
        
        this.results.forEach(result => {
            const icon = result.status === 'PASS' ? '‚úÖ' : result.status === 'PARTIAL' ? '‚ö†Ô∏è' : '‚ùå';
            console.log(`${icon} ${result.test}: ${result.status} (${result.details})`);
            
            if (result.status === 'PASS') passed++;
            else if (result.status === 'FAIL') failed++;
            else partial++;
        });
        
        console.log(`\nüìä ESTAD√çSTICAS:`);
        console.log(`  ‚Ä¢ Pasados: ${passed}`);
        console.log(`  ‚Ä¢ Parciales: ${partial}`);
        console.log(`  ‚Ä¢ Fallidos: ${failed}`);
        
        if (failed === 0) {
            console.log('\nüéâ ¬°Category Menu implementado correctamente!');
            console.log('El men√∫ de categor√≠as deber√≠a funcionar en el modal.');
        } else {
            console.log('\n‚ö†Ô∏è Hay problemas que requieren atenci√≥n.');
        }
        
        console.log('\nüîç INSTRUCCIONES DE TEST MANUAL:');
        console.log('1. Abrir http://localhost:8000');
        console.log('2. Hacer clic en "Ver M√°s Obras"'); 
        console.log('3. Verificar que aparece men√∫ con: Todas las Obras | √ìleos sobre Lino | Impresi√≥n 3D | Dibujos');
        console.log('4. Probar cada categor√≠a y verificar filtrado');
        console.log('5. Verificar navegaci√≥n con flechas dentro de cada categor√≠a');
    }
}

// ===== CLI INTERFACE =====
if (require.main === module) {
    const tester = new CategoryMenuTest();
    const command = process.argv[2];
    
    switch (command) {
        case 'run':
        case 'test':
            tester.runTests();
            break;
        default:
            console.log(`
üéØ SERGIO ARTE PL√ÅSTICA - Category Menu Test

Comandos disponibles:
  node js/test-category-menu.js run   - Ejecutar tests
  node js/test-category-menu.js test  - Ejecutar tests

Tests incluidos:
  ‚úÖ Definici√≥n de categor√≠as
  ‚úÖ Generaci√≥n de men√∫ 
  ‚úÖ L√≥gica de filtrado
  ‚úÖ Estilos CSS
            `);
    }
}

module.exports = CategoryMenuTest;