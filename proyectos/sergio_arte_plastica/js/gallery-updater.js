/**
 * SERGIO ARTE PL√ÅSTICA - Gallery Updater
 * Actualizar todas las referencias de galer√≠a e im√°genes
 */

const fs = require('fs');
const path = require('path');

class GalleryUpdater {
    constructor() {
        this.errors = [];
        this.updates = [];
        
        // Configuraci√≥n de hero con imagen de fondo
        this.heroConfig = {
            backgroundImage: 'images/obras/oil/arqueologia-temporal.jpg', // Imagen principal como fondo
            overlay: true,
            opacity: 0.3
        };
        
        // Obras principales para galer√≠a destacada (3 mejores)
        this.featuredWorks = [
            {
                path: 'images/obras/oil/arqueologia-temporal.jpg',
                alt: 'Arqueologia Temporal',
                title: 'Arqueologia Temporal'
            },
            {
                path: 'images/obras/oil/introspeccion-silenciosa.png',
                alt: 'Introspeccion Silenciosa', 
                title: 'Introspeccion Silenciosa'
            },
            {
                path: 'images/obras/oil/turbulencia-esencial.png',
                alt: 'Turbulencia Esencial',
                title: 'Turbulencia Esencial'
            }
        ];
        
        // Video corregido
        this.videoConfig = {
            src: 'images/videos/img_1940-1.mov',
            poster: 'images/gallery/proceso-creativo.jpg'
        };
    }

    /**
     * Actualizar toda la galer√≠a
     */
    async updateGallery() {
        console.log('üé® ACTUALIZANDO GALER√çA COMPLETA\n');
        console.log('================================\n');

        // 1. Leer gallery-data.js para obtener todas las obras
        const galleryData = await this.loadGalleryData();
        
        // 2. Actualizar hero con imagen de fondo
        await this.updateHero();
        
        // 3. Actualizar galer√≠a principal (3 obras destacadas)
        await this.updateFeaturedGallery();
        
        // 4. Actualizar modal carousel con todas las obras
        await this.updateModalCarousel(galleryData);
        
        // 5. Actualizar videos
        await this.updateVideos();
        
        // 6. Verificar im√°genes existen
        await this.verifyImages();
        
        this.printSummary();
    }

    /**
     * Cargar datos de galer√≠a
     */
    async loadGalleryData() {
        try {
            const galleryDataPath = './js/gallery-data.js';
            const content = await fs.promises.readFile(galleryDataPath, 'utf8');
            
            // Extraer datos del archivo
            const match = content.match(/const GALLERY_DATA = (\[[\s\S]*?\]);/);
            if (match) {
                const galleryData = eval(match[1]);
                console.log(`üìä Cargados ${galleryData.length} obras de gallery-data.js`);
                return galleryData;
            } else {
                throw new Error('No se pudo extraer GALLERY_DATA');
            }
        } catch (error) {
            console.error('‚ùå Error cargando gallery-data.js:', error.message);
            this.errors.push({ type: 'gallery-data', error: error.message });
            return [];
        }
    }

    /**
     * Actualizar hero con imagen de fondo
     */
    async updateHero() {
        try {
            console.log('üñºÔ∏è Actualizando hero con imagen de fondo...');
            
            const htmlPath = './index.html';
            let content = await fs.promises.readFile(htmlPath, 'utf8');
            
            // Buscar la secci√≥n hero y a√±adir imagen de fondo
            const heroSection = `        <!-- Hero Ultra-Elegante -->
        <section class="hero-section" style="background-image: url('${this.heroConfig.backgroundImage}'); background-size: cover; background-position: center; position: relative;">
            <div class="hero-overlay" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0, 0, 0, ${this.heroConfig.opacity}); z-index: 1;"></div>
            <div class="hero-content" style="position: relative; z-index: 2;">
                <h1 class="hero-slogan">Arqueolog√≠a de Estados Internos</h1>
                <p class="hero-tagline">Abstracci√≥n ¬∑ Transformaci√≥n ¬∑ Conciencia</p>
            </div>
        </section>`;
            
            // Reemplazar hero existente
            content = content.replace(
                /<!-- Hero Ultra-Elegante -->[\s\S]*?<\/section>/,
                heroSection
            );
            
            await fs.promises.writeFile(htmlPath, content);
            console.log('  ‚úÖ Hero actualizado con imagen de fondo');
            
            this.updates.push('Hero section actualizada con imagen de fondo');
            
        } catch (error) {
            console.error('‚ùå Error actualizando hero:', error.message);
            this.errors.push({ type: 'hero', error: error.message });
        }
    }

    /**
     * Actualizar galer√≠a principal destacada
     */
    async updateFeaturedGallery() {
        try {
            console.log('üéØ Actualizando galer√≠a principal (3 obras destacadas)...');
            
            const htmlPath = './index.html';
            let content = await fs.promises.readFile(htmlPath, 'utf8');
            
            // Generar HTML para obras destacadas
            const galleryHTML = this.featuredWorks.map(work => `                <article class="artwork">
                    <img src="${work.path}" alt="${work.alt}" class="artwork-image">
                </article>`).join('\n');
            
            // Reemplazar galer√≠a existente
            const gallerySection = `            <div class="gallery-grid">
                <!-- 3 obras representativas -->
${galleryHTML}
            </div>`;
            
            content = content.replace(
                /<div class="gallery-grid">[\s\S]*?<\/div>/,
                gallerySection
            );
            
            await fs.promises.writeFile(htmlPath, content);
            console.log('  ‚úÖ Galer√≠a principal actualizada');
            
            this.updates.push('Galer√≠a principal actualizada con 3 obras destacadas');
            
        } catch (error) {
            console.error('‚ùå Error actualizando galer√≠a principal:', error.message);
            this.errors.push({ type: 'featured-gallery', error: error.message });
        }
    }

    /**
     * Actualizar modal carousel con todas las obras
     */
    async updateModalCarousel(galleryData) {
        try {
            console.log('üé† Actualizando modal carousel con todas las obras...');
            
            const htmlPath = './index.html';
            let content = await fs.promises.readFile(htmlPath, 'utf8');
            
            // Generar slides para todas las obras
            const slidesHTML = galleryData.map((work, index) => `                    <div class="carousel-slide${index === 0 ? ' active' : ''}">
                        <img src="images/${work.path}" alt="${work.title}" class="carousel-image">
                        <div class="carousel-info">
                            <h3>${work.title}</h3>
                            <p>${work.technique}, ${work.dimensions} ‚Ä¢ ${work.year}</p>
                        </div>
                    </div>`).join('\n');
            
            // Reemplazar carousel track
            const carouselTrack = `                <div class="carousel-track" id="carouselTrack">
                    <!-- Todas las obras del carrusel -->
${slidesHTML}
                </div>`;
            
            content = content.replace(
                /<div class="carousel-track" id="carouselTrack">[\s\S]*?<\/div>/,
                carouselTrack
            );
            
            await fs.promises.writeFile(htmlPath, content);
            console.log(`  ‚úÖ Modal carousel actualizado con ${galleryData.length} obras`);
            
            this.updates.push(`Modal carousel actualizado con ${galleryData.length} obras`);
            
        } catch (error) {
            console.error('‚ùå Error actualizando modal carousel:', error.message);
            this.errors.push({ type: 'modal-carousel', error: error.message });
        }
    }

    /**
     * Actualizar videos
     */
    async updateVideos() {
        try {
            console.log('üé¨ Actualizando referencias de videos...');
            
            const htmlPath = './index.html';
            let content = await fs.promises.readFile(htmlPath, 'utf8');
            
            // Actualizar source del video
            content = content.replace(
                /src="images\/videos\/IMG_1940\.MOV"/g,
                `src="${this.videoConfig.src}"`
            );
            
            await fs.promises.writeFile(htmlPath, content);
            console.log('  ‚úÖ Referencias de video actualizadas');
            
            this.updates.push('Referencias de video corregidas');
            
        } catch (error) {
            console.error('‚ùå Error actualizando videos:', error.message);
            this.errors.push({ type: 'videos', error: error.message });
        }
    }

    /**
     * Verificar que las im√°genes existen
     */
    async verifyImages() {
        console.log('üîç Verificando que las im√°genes existen...');
        
        const imagesToCheck = [
            ...this.featuredWorks.map(w => w.path),
            this.heroConfig.backgroundImage,
            this.videoConfig.poster,
            this.videoConfig.src
        ];
        
        for (const imagePath of imagesToCheck) {
            if (fs.existsSync(imagePath)) {
                console.log(`  ‚úÖ ${imagePath}`);
            } else {
                console.log(`  ‚ùå ${imagePath} (NO EXISTE)`);
                this.errors.push({ 
                    type: 'missing-image', 
                    error: `Imagen no encontrada: ${imagePath}` 
                });
            }
        }
    }

    /**
     * Imprimir resumen
     */
    printSummary() {
        console.log('\nüé® RESUMEN DE ACTUALIZACI√ìN DE GALER√çA:');
        console.log('======================================');
        console.log(`‚úÖ Actualizaciones completadas: ${this.updates.length}`);
        console.log(`‚ùå Errores: ${this.errors.length}`);
        
        if (this.updates.length > 0) {
            console.log('\nüìã ACTUALIZACIONES REALIZADAS:');
            this.updates.forEach(update => {
                console.log(`  ‚Ä¢ ${update}`);
            });
        }
        
        if (this.errors.length > 0) {
            console.log('\nüö® ERRORES:');
            this.errors.forEach(error => {
                console.log(`  - ${error.type}: ${error.error}`);
            });
        }
        
        console.log('\nüåü ¬°Galer√≠a actualizada!');
        console.log('Todas las referencias de im√°genes est√°n ahora correctas.');
    }
}

// ===== CLI INTERFACE =====
if (require.main === module) {
    const updater = new GalleryUpdater();
    const command = process.argv[2];
    
    switch (command) {
        case 'run':
        case 'update':
            updater.updateGallery();
            break;
        default:
            console.log(`
üé® SERGIO ARTE PL√ÅSTICA - Gallery Updater

Comandos disponibles:
  node js/gallery-updater.js run     - Actualizar galer√≠a completa
  node js/gallery-updater.js update  - Actualizar galer√≠a completa

Funciones:
  ‚úÖ A√±ade imagen de fondo al hero
  ‚úÖ Actualiza galer√≠a principal con 3 obras destacadas
  ‚úÖ Genera modal carousel con todas las obras de gallery-data.js
  ‚úÖ Corrige referencias de videos
  ‚úÖ Verifica que todas las im√°genes existen
            `);
    }
}

module.exports = GalleryUpdater;